# Массив размером 2m + 1, где m — натуральное число, заполнен случайным образом. Найдите
#  в массиве медиану. Медианой называется элемент ряда, делящий его на две равные части:
#  в одной находятся элементы, которые не меньше медианы, в другой — не больше медианы.
#  Примечание: задачу можно решить без сортировки исходного массива. Но если это слишком
# сложно, используйте метод сортировки, который не рассматривался на уроках (сортировка слиянием также недопустима).
import random


def without_sorting(a):
	list = [0] * (N + 1)
	tmp = []
	for i in a:
		list[i] += i
	for i in range(N + 1):
		if list[i] > 0:
			tmp.append(list[i])
	print(f'медиана - {tmp[len(a) // 2]}')
	return tmp



L = 10
N = 100
array = random.sample(range(1, N), 2 * L + 1)

print(f'{array} - исходный массив')
print(f'{without_sorting(array)} - отсортированный массив')



# придумал алгоритм поиска медианы без сортировки.
# Но работает только с натуральными и уникальными числами.
# сделать поиск в массиве с  повторяющимися числами без сортировки так и не получилось.

# правда ,занимает памяти этот способ очень много ,в 100 раз больше, чем алгоритмы из 6 го урока
# (проверил функцией из предыдущего урока)
# L = 100000
# N = 10000000

# ********************************************************************************
# переменная -a- имеет тип <class 'list'> и занимает 1600072 байт
# переменная -list- имеет тип <class 'list'> и занимает 80000072 байт
# переменная -tmp- имеет тип <class 'list'> и занимает 1671792 байт
# переменная -i- имеет тип <class 'int'> и занимает 28 байт
# ОБЩАЯ СУММА ЗАНИМАЕМОЙ ПАМЯТИ : 83271964 байт